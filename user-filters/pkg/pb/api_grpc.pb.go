// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: api.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserFilters_GetFilter_FullMethodName          = "/proto.UserFilters/GetFilter"
	UserFilters_SaveFilter_FullMethodName         = "/proto.UserFilters/SaveFilter"
	UserFilters_GetFiltersByUserID_FullMethodName = "/proto.UserFilters/GetFiltersByUserID"
)

// UserFiltersClient is the client API for UserFilters service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserFiltersClient interface {
	GetFilter(ctx context.Context, in *GetFilterRequest, opts ...grpc.CallOption) (*GetFilterResponse, error)
	SaveFilter(ctx context.Context, in *SaveFilterRequest, opts ...grpc.CallOption) (*SaveFilterResponse, error)
	GetFiltersByUserID(ctx context.Context, in *GetFiltersByUserIDRequest, opts ...grpc.CallOption) (*GetFiltersByUserIDResponse, error)
}

type userFiltersClient struct {
	cc grpc.ClientConnInterface
}

func NewUserFiltersClient(cc grpc.ClientConnInterface) UserFiltersClient {
	return &userFiltersClient{cc}
}

func (c *userFiltersClient) GetFilter(ctx context.Context, in *GetFilterRequest, opts ...grpc.CallOption) (*GetFilterResponse, error) {
	out := new(GetFilterResponse)
	err := c.cc.Invoke(ctx, UserFilters_GetFilter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userFiltersClient) SaveFilter(ctx context.Context, in *SaveFilterRequest, opts ...grpc.CallOption) (*SaveFilterResponse, error) {
	out := new(SaveFilterResponse)
	err := c.cc.Invoke(ctx, UserFilters_SaveFilter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userFiltersClient) GetFiltersByUserID(ctx context.Context, in *GetFiltersByUserIDRequest, opts ...grpc.CallOption) (*GetFiltersByUserIDResponse, error) {
	out := new(GetFiltersByUserIDResponse)
	err := c.cc.Invoke(ctx, UserFilters_GetFiltersByUserID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserFiltersServer is the server API for UserFilters service.
// All implementations must embed UnimplementedUserFiltersServer
// for forward compatibility
type UserFiltersServer interface {
	GetFilter(context.Context, *GetFilterRequest) (*GetFilterResponse, error)
	SaveFilter(context.Context, *SaveFilterRequest) (*SaveFilterResponse, error)
	GetFiltersByUserID(context.Context, *GetFiltersByUserIDRequest) (*GetFiltersByUserIDResponse, error)
	mustEmbedUnimplementedUserFiltersServer()
}

// UnimplementedUserFiltersServer must be embedded to have forward compatible implementations.
type UnimplementedUserFiltersServer struct {
}

func (UnimplementedUserFiltersServer) GetFilter(context.Context, *GetFilterRequest) (*GetFilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilter not implemented")
}
func (UnimplementedUserFiltersServer) SaveFilter(context.Context, *SaveFilterRequest) (*SaveFilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveFilter not implemented")
}
func (UnimplementedUserFiltersServer) GetFiltersByUserID(context.Context, *GetFiltersByUserIDRequest) (*GetFiltersByUserIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFiltersByUserID not implemented")
}
func (UnimplementedUserFiltersServer) mustEmbedUnimplementedUserFiltersServer() {}

// UnsafeUserFiltersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserFiltersServer will
// result in compilation errors.
type UnsafeUserFiltersServer interface {
	mustEmbedUnimplementedUserFiltersServer()
}

func RegisterUserFiltersServer(s grpc.ServiceRegistrar, srv UserFiltersServer) {
	s.RegisterService(&UserFilters_ServiceDesc, srv)
}

func _UserFilters_GetFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserFiltersServer).GetFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserFilters_GetFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserFiltersServer).GetFilter(ctx, req.(*GetFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserFilters_SaveFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserFiltersServer).SaveFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserFilters_SaveFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserFiltersServer).SaveFilter(ctx, req.(*SaveFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserFilters_GetFiltersByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFiltersByUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserFiltersServer).GetFiltersByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserFilters_GetFiltersByUserID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserFiltersServer).GetFiltersByUserID(ctx, req.(*GetFiltersByUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserFilters_ServiceDesc is the grpc.ServiceDesc for UserFilters service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserFilters_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.UserFilters",
	HandlerType: (*UserFiltersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFilter",
			Handler:    _UserFilters_GetFilter_Handler,
		},
		{
			MethodName: "SaveFilter",
			Handler:    _UserFilters_SaveFilter_Handler,
		},
		{
			MethodName: "GetFiltersByUserID",
			Handler:    _UserFilters_GetFiltersByUserID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
